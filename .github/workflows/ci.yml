name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '22'
  PNPM_VERSION: '10.13'

jobs:
  # Lint and format check
  lint:
    name: Lint & Format Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: TypeScript type check
        run: pnpm run type-check

      - name: ESLint check
        run: pnpm run lint

      - name: Prettier format check
        run: pnpm run format:check

  # Security and dependency audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run pnpm audit
        run: pnpm audit --audit-level moderate

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: typescript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # Unit and integration tests
  test:
    name: Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: bluesky_scheduler_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup test environment
        run: |
          cp packages/backend/.env.example packages/backend/.env.test
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/bluesky_scheduler_test
          REDIS_URL: redis://localhost:6379

      - name: Run database migrations
        run: pnpm run db:migrate:test
        working-directory: packages/backend

      - name: Run tests with coverage
        run: pnpm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            coverage/
            jest-junit.xml

  # Build packages
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint, test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build shared package
        run: pnpm run build
        working-directory: packages/shared

      - name: Build backend
        run: pnpm run build
        working-directory: packages/backend

      - name: Build frontend
        run: pnpm run build
        working-directory: packages/frontend

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            packages/*/dist/
            packages/frontend/build/

  # Database migration check
  migration-check:
    name: Migration Check
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: migration_test
          POSTGRES_USER: migration_user
          POSTGRES_DB: migration_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check Prisma schema
        run: pnpm run db:generate
        working-directory: packages/backend

      - name: Run migrations
        run: pnpm run db:migrate:deploy
        working-directory: packages/backend
        env:
          DATABASE_URL: postgresql://migration_user:migration_test@localhost:5432/migration_db

      - name: Validate schema
        run: pnpm run db:validate
        working-directory: packages/backend
        env:
          DATABASE_URL: postgresql://migration_user:migration_test@localhost:5432/migration_db

  # Deploy to staging (on develop branch)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, migration-check]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'

    environment:
      name: staging
      url: https://staging.chronopost.example.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Deploy to Railway (Staging)
        uses: railway/cli@v1
        with:
          railway-token: ${{ secrets.RAILWAY_TOKEN_STAGING }}
          command: up --service backend
        env:
          RAILWAY_PROJECT_ID: ${{ secrets.RAILWAY_PROJECT_ID_STAGING }}

      - name: Deploy Frontend to Vercel (Staging)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID_STAGING }}
          working-directory: packages/frontend

      - name: Run post-deployment tests
        run: |
          sleep 30 # Wait for deployment
          pnpm run test:e2e:staging
        env:
          STAGING_URL: https://staging.chronopost.example.com

      - name: Notify staging deployment
        uses: sarisia/actions-status-discord@v1
        if: always()
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          status: ${{ job.status }}
          title: "üöß „Çπ„ÉÜ„Éº„Ç∏„É≥„Ç∞Áí∞Â¢É„Éá„Éó„É≠„Ç§"
          description: "Chronopost „ÅÆ„Çπ„ÉÜ„Éº„Ç∏„É≥„Ç∞Áí∞Â¢É„Éá„Éó„É≠„Ç§„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü"
          color: ${{ job.status == 'success' && 0x00ffff || 0xff8800 }}
          url: https://staging.chronopost.example.com

  # Deploy to production (on main branch)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, migration-check]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    environment:
      name: production
      url: https://chronopost.example.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Deploy to Railway (Production)
        uses: railway/cli@v1
        with:
          railway-token: ${{ secrets.RAILWAY_TOKEN_PRODUCTION }}
          command: up --service backend
        env:
          RAILWAY_PROJECT_ID: ${{ secrets.RAILWAY_PROJECT_ID_PRODUCTION }}

      - name: Deploy Frontend to Vercel (Production)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID_PRODUCTION }}
          vercel-args: '--prod'
          working-directory: packages/frontend

      - name: Run post-deployment health check
        run: |
          sleep 60 # Wait for deployment
          curl -f https://chronopost.example.com/health || exit 1

      - name: Notify deployment success
        uses: sarisia/actions-status-discord@v1
        if: success()
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          status: success
          title: "üöÄ Êú¨Áï™Áí∞Â¢É„Éá„Éó„É≠„Ç§ÊàêÂäü"
          description: "Chronopost „ÅÆÊú¨Áï™Áí∞Â¢É„Éá„Éó„É≠„Ç§„ÅåÊ≠£Â∏∏„Å´ÂÆå‰∫Ü„Åó„Åæ„Åó„Åü"
          color: 0x00ff00
          url: https://chronopost.example.com

      - name: Notify deployment failure
        uses: sarisia/actions-status-discord@v1
        if: failure()
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          status: failure
          title: "‚ùå Êú¨Áï™Áí∞Â¢É„Éá„Éó„É≠„Ç§Â§±Êïó"
          description: "Chronopost „ÅÆÊú¨Áï™Áí∞Â¢É„Éá„Éó„É≠„Ç§„Åß„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü"
          color: 0xff0000
